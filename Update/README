
********************************************************************************

                  Update programs for the gauge field

********************************************************************************


The programs in this directory implement the Cabibbo-Marinari update
algorithm for the single-precision gauge field. In particular, the
function

  void cabmar(float beta,su3 *u,su3 *v,int type)

updates the SU(3) matrix u with probability density proportional to

  p(u)=exp{(beta/3)*Re[tr(u*v^dagger)]}

by applying three Cabibbo-Marinari rotations. The rotations act from
the left and are taken from the SU(2) subgroups of SU(3) in the
(12),(13) and (23) planes. The parameter "type" controls whether the
heatbath (type=0) or over-relaxation (type=1) algorithm is used.

In the simulation program the complex matrix v is the sum of the
"staples" and u the link variable that is to be updated. One does not
need to know this in the cabmar program, since the Cabibbo-Marinari
rotations do not refer to the gauge field in any other way than
through u and v.

A combination of the Creutz and Fabricius-Haan (also referred to as
the Kennedy-Pendleton) algorithms are used in the heatbath update
which is efficient for all values of beta and safe of rounding errors.
Further details can be found in the notes cabmar.ps and haanfab.ps.


Files
-----

cabmar.c       Cabibbo-Marinari rotations

staples.c      Computation of the "staples"

update.c       Heatbath and over-relaxation update programs


Include file
------------

The file update.h defines the prototypes for all externally accessible
functions that are defined in the *.c files listed above.


List of functions
-----------------

void cabmar(float beta,su3 *u, su3 *v,int type)
     Updates the SU(3) matrix u with probability density proportional to
     exp{(beta/3)*Re[tr(u*v^dagger)]} by applying three Cabibbo-Marinari 
     heatbath (if type=0) or over-relaxation (if type=1) rotations

void staples(int ix,int mu,su3 *v)
     Computes the 3x3 matrix v such that the part of the Wilson action
     that depends on u=U(x,mu) is given by -2/g_0^2*Re[tr{u*v^dagger}]

void update(float beta,int nhb,int nor)
     Updates the whole lattice at inverse coupling beta=6/g_0^2 by performing
     nhb heatbath sweeps followed by nor over-relaxation sweeps

